"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const clc = require("cli-color");
const winston = require("winston");
const DailyRotateFile = require("winston-daily-rotate-file");
const logger_interface_1 = require("./logger.interface");
class LoggerService {
    constructor(level, loggers) {
        loggers.forEach(logger => logger.transport.format = this.defaultFormatter(logger.options));
        this.logger = winston.createLogger({
            level,
            transports: loggers.map(l => l.transport),
        });
    }
    static getLoggers(transportNames, options) {
        const loggers = [];
        if (transportNames.indexOf(logger_interface_1.LoggerTransport.CONSOLE) >= 0) {
            loggers.push(LoggerService.console(options));
        }
        if (transportNames.indexOf(logger_interface_1.LoggerTransport.ROTATE) >= 0) {
            loggers.push(LoggerService.rotate(options));
        }
        return loggers;
    }
    static console(options) {
        const defaultOptions = Object.assign({}, LoggerService.DEFAULT_LOGGER_OPTIONS);
        const consoleLoggerOptions = Object.assign(defaultOptions, options);
        const consoleTransportOptions = Object.assign(defaultOptions.consoleOptions, options.consoleOptions);
        const transport = new winston.transports.Console(consoleTransportOptions);
        return { transport, options: consoleLoggerOptions };
    }
    static rotate(options) {
        const defaultOptions = Object.assign({}, LoggerService.DEFAULT_LOGGER_OPTIONS);
        const fileLoggerOptions = Object.assign(defaultOptions, options);
        const fileTransportOptions = Object.assign(defaultOptions.fileOptions, options.fileOptions);
        if (fileTransportOptions.filename === LoggerService.DEFAULT_FILENAME) {
            fileTransportOptions.filename = `app-%DATE%.log`;
        }
        const transport = new DailyRotateFile(fileTransportOptions);
        return { transport, options: fileLoggerOptions };
    }
    setRequestId(id) {
        this.requestId = id;
    }
    getRequestId() {
        return this.requestId;
    }
    setContext(ctx) {
        this.context = ctx;
    }
    log(msg, context) {
        this.info(this.dataToString(msg), context);
    }
    debug(msg, context) {
        this.logger.debug(this.dataToString(msg), [{ context, reqId: this.requestId }]);
    }
    info(msg, context) {
        this.logger.info(this.dataToString(msg), [{ context, reqId: this.requestId }]);
    }
    warn(msg, context) {
        this.logger.warn(this.dataToString(msg), [{ context, reqId: this.requestId }]);
    }
    error(msg, trace, context) {
        this.logger.error(this.dataToString(msg), [{ context }]);
        this.logger.error(trace, [{ context, reqId: this.requestId }]);
    }
    dataToString(msg) {
        if (typeof msg.entries === "function" && typeof msg.forEach === "function") {
            const elements = [];
            msg.forEach((value, key) => elements.push(`${key}:${value}`));
            return elements;
        }
        else {
            return msg;
        }
    }
    defaultFormatter(options) {
        const colorize = options.colorize;
        const format = winston.format.printf(info => {
            const level = colorize ? this.colorizeLevel(info.level) : `[${info.level.toUpperCase()}]`.padEnd(7);
            let message = info.message;
            if (typeof info.message === "object") {
                message = JSON.stringify(message, null, 3);
            }
            let reqId = "";
            let context = "";
            if (info["0"]) {
                const meta = info["0"];
                if (meta.reqId) {
                    reqId = colorize ? clc.cyan(`[${meta.reqId}]`) : `[${meta.reqId}]`;
                }
                const ctx = meta.context || this.context || null;
                if (ctx) {
                    context = `[${ctx.substr(0, 20)}]`.padEnd(32);
                    if (colorize) {
                        context = clc.blackBright(context);
                    }
                }
            }
            return `${info.timestamp} ${context}${level}${reqId} ${message}`;
        });
        return winston.format.combine(winston.format.timestamp({
            format: options.timeFormat,
        }), format);
    }
    colorizeLevel(level) {
        let colorFunc;
        switch (level) {
            case "debug":
                colorFunc = (msg) => clc.blue(msg);
                break;
            case "info":
                colorFunc = (msg) => clc.green(msg);
                break;
            case "warn":
                colorFunc = (msg) => clc.yellow(msg);
                break;
            case "error":
                colorFunc = (msg) => clc.red(msg);
                break;
        }
        return colorFunc(`[${level.toUpperCase()}]`).padEnd(17);
    }
}
exports.LoggerService = LoggerService;
LoggerService.DEFAULT_TIME_FORMAT = "HH:mm:ss";
LoggerService.DEFAULT_LEVEL = "info";
LoggerService.DEFAULT_FILENAME = "-";
LoggerService.DEFAULT_FILE_OPTIONS = {
    filename: LoggerService.DEFAULT_FILENAME,
    datePattern: "YYYY-MM-DD",
    zippedArchive: false,
    maxFiles: "10d",
    options: { flags: "a", mode: "0776" },
};
LoggerService.DEFAULT_CONSOLE_OPTIONS = {};
LoggerService.DEFAULT_LOGGER_OPTIONS = {
    timeFormat: LoggerService.DEFAULT_TIME_FORMAT,
    fileOptions: LoggerService.DEFAULT_FILE_OPTIONS,
    consoleOptions: LoggerService.DEFAULT_CONSOLE_OPTIONS,
    colorize: true,
};
//# sourceMappingURL=logger.service.js.map